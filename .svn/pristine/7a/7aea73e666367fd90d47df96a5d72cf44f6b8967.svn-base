package com.hd.microblog.web.controller.admin;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hd.microblog.model.dt_dataprocess;
import com.hd.microblog.model.dt_prediction;
import com.hd.microblog.service.dt_adminService;
import com.hd.microblog.service.dt_dataprocessService;
import com.hd.microblog.service.dt_predictionService;
import com.hd.microblog.util.createxls;




@Controller
public class AdminpredictionController {
	 
	@Autowired
	@Qualifier("dt_predictionService")
	private dt_predictionService dt_predictionservice;
	@Autowired
	@Qualifier("dt_dataprocessService")
	private dt_dataprocessService dt_dataprocessservice;
	
	//预测查询表
	@RequestMapping("/adminpredictionlist")
	public String adminpredictionlist(HttpServletRequest request, HttpServletResponse resp) 
			throws IOException {
		return "admin/predictionlist";
	}
	//预测查询表
	@RequestMapping(value = "/adminpredictionlistajax", method = { RequestMethod.POST }, produces = "application/json; charset=utf-8")
	@ResponseBody
	private String adminpredictionlistajax(HttpServletRequest request, Model model, String page, String rows ,Integer draw,
			String zbcode,String qccode,String qcname,String sort) throws IOException {
		
		Integer start = Integer.valueOf(request.getParameter("start"));
	    String length = request.getParameter("length");  
		int number = Integer.valueOf(length);
		List items = dt_predictionservice.adminfindpredictionlist(zbcode,qccode,qcname,sort,start,number);
		List count = dt_predictionservice.adminfindpredictionlistcount(zbcode,qccode,qcname);
		int countnumber = 0;
		if (count != null && count.size() != 0) {
			Map map = (Map) count.get(0);
			countnumber = Integer.valueOf(String.valueOf(map.get("count")));
		}
		List returnlist  = new ArrayList();
		for(int i=0;i<items.size();i++){
			Map map = (Map)items.get(i);
			returnlist.add(map);
		}
		//System.out.println(Math.sqrt(9));
		//System.out.println(Math.pow(3,2));
		
		JSONObject jobj = new JSONObject();
		
		jobj.accumulate("draw", draw);
		jobj.accumulate("recordsFiltered", countnumber);
		jobj.accumulate("recordsTotal", countnumber);
		jobj.accumulate("data", returnlist);
		return jobj.toString();
	}
	//统计
	@RequestMapping(value = "/adminpredictionstatistics",produces = "application/json; charset=utf-8")
	@ResponseBody
	private String adminpredictionstatistics(HttpServletRequest request,HttpServletResponse resp) throws IOException {
		HttpSession session = request.getSession();
		resp.setHeader("Access-Control-Allow-Origin", "*");
		resp.setHeader("Access-Control-Allow-Methods", "GET,POST");
		JSONObject json = new JSONObject();
		try{
			List list = dt_predictionservice.adminfindpredictionlistall();
			for(int i=0;i<200;i++){//list.size()
				Map map = (Map)list.get(i);
				
				dt_prediction prediction = dt_predictionservice.get(Integer.valueOf(String.valueOf(map.get("prediction_id"))));
				Map returnmap3 = (Map)Standarddeviation(prediction.getDataprocess_id(),3);
				Map returnmap2 = (Map)Standarddeviation(prediction.getDataprocess_id(),2);
				Map returnmap1 = (Map)Standarddeviation(prediction.getDataprocess_id(),1);
				
				
				//预测值
				prediction.setYcz1(String.valueOf(returnmap3.get("Average")));//前年3
				prediction.setYcz2(String.valueOf(returnmap2.get("Average")));//去年2
				prediction.setYcz3(String.valueOf(returnmap1.get("Average")));//今年1
				//标准差
				prediction.setBzc1(String.valueOf(returnmap3.get("result")));
				prediction.setBzc2(String.valueOf(returnmap2.get("result")));
				prediction.setBzc3(String.valueOf(returnmap1.get("result")));
				//真实值
				prediction.setZsz1(String.valueOf(returnmap3.get("real")));
				prediction.setZsz2(String.valueOf(returnmap2.get("real")));
				prediction.setZsz3(String.valueOf(returnmap1.get("real")));
				//预测方法
				prediction.setYcff1("移动平均法");
				prediction.setYcff2("移动平均法");
				prediction.setYcff3("移动平均法");
				
				dt_predictionservice.saveOrUpdate(prediction);
				
				System.out.println("==="+i);
			}
			json.put("code", "100");
			json.put("info", "统计成功，请刷新页面");
		}catch(Exception e){
			e.printStackTrace();
			json.put("code", "400");
			json.put("info", "系统错误");
		}
		return json.toString();
	}	
//	//预测值计算
//	private Double prediction(Integer dataprocess_id,Integer agenumbner) throws IOException {
//		DecimalFormat df = new DecimalFormat("#.00");
//		Double result=(double) 0;
//		dt_dataprocess dataprocess = dt_dataprocessservice.get(dataprocess_id);
//		if(agenumbner==1) {
//			result= Double.valueOf(df.format((double)(dataprocess.getAge2()+dataprocess.getAge3()+dataprocess.getAge4()+dataprocess.getAge5()+dataprocess.getAge6()+dataprocess.getAge7()+dataprocess.getAge8()+dataprocess.getAge9()+dataprocess.getAge10())/9));
//		}else if(agenumbner==2) {
//			result= Double.valueOf(df.format((double)(dataprocess.getAge3()+dataprocess.getAge4()+dataprocess.getAge5()+dataprocess.getAge6()+dataprocess.getAge7()+dataprocess.getAge8()+dataprocess.getAge9()+dataprocess.getAge10())/8));
//		}else if(agenumbner==3) {
//			result= Double.valueOf(df.format((double)(dataprocess.getAge4()+dataprocess.getAge5()+dataprocess.getAge6()+dataprocess.getAge7()+dataprocess.getAge8()+dataprocess.getAge9()+dataprocess.getAge10())/7));
//		}
//		return result;
//	}
	//标准差计算
	private JSONObject Standarddeviation(Integer dataprocess_id,Integer agenumbner) throws IOException {
		JSONObject json = new JSONObject();
		DecimalFormat df = new DecimalFormat("#.00");
		Double Average=(double) 0;
		Double result=(double) 0;
		Double real=(double) 0;
		dt_dataprocess dataprocess = dt_dataprocessservice.get(dataprocess_id);
		if(agenumbner==1) {
			Average= Double.valueOf(df.format((double)(dataprocess.getAge2()+dataprocess.getAge3()+dataprocess.getAge4()+dataprocess.getAge5()+dataprocess.getAge6()+dataprocess.getAge7()+dataprocess.getAge8()+dataprocess.getAge9()+dataprocess.getAge10())/9));
			Double number = (Math.pow((Double.valueOf(dataprocess.getAge2())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge3())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge4())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge5())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge6())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge7())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge8())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge9())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge10())-Average),2))/9;
			result = Double.valueOf(df.format(Math.sqrt(number)));
			real = Double.valueOf(dataprocess.getAge1());
		}else if(agenumbner==2) {
			Average= Double.valueOf(df.format((double)(dataprocess.getAge3()+dataprocess.getAge4()+dataprocess.getAge5()+dataprocess.getAge6()+dataprocess.getAge7()+dataprocess.getAge8()+dataprocess.getAge9()+dataprocess.getAge10())/8));
			Double number = (Math.pow((Double.valueOf(dataprocess.getAge3())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge4())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge5())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge6())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge7())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge8())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge9())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge10())-Average),2))/9;
			result = Double.valueOf(df.format(Math.sqrt(number)));
			real = Double.valueOf(dataprocess.getAge2());
		}else if(agenumbner==3) {
			Average= Double.valueOf(df.format((double)(dataprocess.getAge4()+dataprocess.getAge5()+dataprocess.getAge6()+dataprocess.getAge7()+dataprocess.getAge8()+dataprocess.getAge9()+dataprocess.getAge10())/7));
			Double number = (Math.pow((Double.valueOf(dataprocess.getAge4())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge5())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge6())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge7())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge8())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge9())-Average),2)+Math.pow((Double.valueOf(dataprocess.getAge10())-Average),2))/9;
			result = Double.valueOf(df.format(Math.sqrt(number)));
			real = Double.valueOf(dataprocess.getAge3());
		}
		json.put("Average", Average);
		json.put("result", result);
		json.put("real", real);
		return json;
	}
	//Excel生成
	@RequestMapping(value = "/adminpredictionExcel",produces = "application/json; charset=utf-8")
	@ResponseBody
	private String adminpredictionExcel(HttpServletRequest request,HttpServletResponse resp) throws IOException {
		HttpSession session = request.getSession();
		resp.setHeader("Access-Control-Allow-Origin", "*");
		resp.setHeader("Access-Control-Allow-Methods", "GET,POST");
		JSONObject json = new JSONObject();
		try{
			//生成xls表头
			List<String> header = new ArrayList<String>(); // 第一行数据
			List<List<String>> body = new ArrayList<List<String>>();
			header.add("装备代码");
		    header.add("器材代码");
		    header.add("器材名称");
		    header.add("预测值(前年消耗)");
		    header.add("标准差(前年消耗)");
		    header.add("预测方法(前年消耗)");
		    header.add("真实值(前年消耗)");
		    header.add("预测值(去年消耗)");
		    header.add("标准差(去年消耗)");
		    header.add("预测方法(去年消耗)");
		    header.add("真实值(去年消耗)");
		    header.add("预测值(今年消耗)");
		    header.add("标准差(今年消耗)");
		    header.add("预测方法(今年消耗)");
		    header.add("真实值(今年消耗)");
		    
		    List<String> data1 = new ArrayList<String>();
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
			data1.add("");
	    	body.add(data1);
		    
		    
		    List items = dt_predictionservice.adminfindpredictionlist();
			for(int i=0;i<items.size();i++){
				Map map = (Map)items.get(i);
				//添加xls信息
				List<String> data = new ArrayList<String>();
				data.add(String.valueOf(map.get("zbcode")));
				data.add(String.valueOf(map.get("qccode")));
				data.add(String.valueOf(map.get("qcname")));
				data.add(String.valueOf(map.get("ycz1")));
				data.add(String.valueOf(map.get("bzc1")));
				data.add(String.valueOf(map.get("ycff1")));
				data.add(String.valueOf(map.get("zsz1")));
				data.add(String.valueOf(map.get("ycz2")));
				data.add(String.valueOf(map.get("bzc2")));
				data.add(String.valueOf(map.get("ycff2")));
				data.add(String.valueOf(map.get("zsz2")));
				data.add(String.valueOf(map.get("ycz3")));
				data.add(String.valueOf(map.get("bzc3")));
				data.add(String.valueOf(map.get("ycff3")));
				data.add(String.valueOf(map.get("zsz3")));
		    	body.add(data);
		    	
			}
			//xls输出
			String loadpath = request.getSession().getServletContext().getRealPath("/") + "..//upload" + File.separator;
		    //新建文件路径
		    File file2 = new File(loadpath);
			if (!file2.exists()) {
				file2.mkdir();
			}
			try(OutputStream out = new FileOutputStream(loadpath+"/"+"预测查询.xls")){
				createxls.generateExcel("Sheet1", header, body, out);
			} catch (Exception e) {
				e.printStackTrace();
			}
			json.put("code", "100");
			json.put("info", "生成成功");
		}catch(Exception e){
			e.printStackTrace();
			json.put("code", "400");
			json.put("info", "系统错误");
		}
		return json.toString();
	}	
}






