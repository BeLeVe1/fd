package com.hd.microblog.web.controller.admin;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hd.microblog.model.dt_analysis;
import com.hd.microblog.model.dt_dataprocess;
import com.hd.microblog.model.dt_sharedpart;
import com.hd.microblog.service.dt_adminService;
import com.hd.microblog.service.dt_analysisService;
import com.hd.microblog.service.dt_dataprocessService;
import com.hd.microblog.service.dt_sharedpartService;
import com.hd.microblog.util.createxls;




@Controller
public class AdminsharedpartController {
	 
	@Autowired
	@Qualifier("dt_adminService")
	private dt_adminService dt_adminservice;
	@Autowired
	@Qualifier("dt_sharedpartService")
	private dt_sharedpartService dt_sharedpartservice;
	@Autowired
	@Qualifier("dt_analysisService")
	private dt_analysisService dt_analysisservice;
	
	//部队
	@RequestMapping("/adminsharedpartbdlist")
	public String adminsharedpartbdlist(HttpServletRequest request, HttpServletResponse resp) 
			throws IOException {
		return "admin/sharedpartbdlist";
	}
	//军区
	@RequestMapping("/adminsharedpartjqlist")
	public String adminsharedpartjqlist(HttpServletRequest request, HttpServletResponse resp) 
			throws IOException {
		return "admin/sharedpartjqlist";
	}
	//总部
	@RequestMapping("/adminsharedpartzblist")
	public String adminsharedpartzblist(HttpServletRequest request, HttpServletResponse resp) 
			throws IOException {
		return "admin/sharedpartzblist";
	}
	//共用件优化表
	@RequestMapping(value = "/adminsharedpartlistajax", method = { RequestMethod.POST }, produces = "application/json; charset=utf-8")
	@ResponseBody
	private String adminsharedpartlistajax(HttpServletRequest request, Model model, String page, String rows ,Integer draw, 
			String jqcode,String bdcode,String zbcode,String zbzyd,String qccode,String qcname,String fg,String sort) throws IOException {
		
		Integer start = Integer.valueOf(request.getParameter("start"));  
	    String length = request.getParameter("length");  
		int number = Integer.valueOf(length);
		List items = dt_sharedpartservice.adminfindsharedpartlist(jqcode,bdcode,zbcode,zbzyd,qccode,qcname,fg,sort,start,number);
		List count = dt_sharedpartservice.adminfindsharedpartlistcount(jqcode,bdcode,zbcode,zbzyd,qccode,qcname,fg);
		int countnumber = 0;
		if (count != null && count.size() != 0) {
			Map map = (Map) count.get(0);
			countnumber = Integer.valueOf(String.valueOf(map.get("count")));
		}
		List returnlist  = new ArrayList();
		for(int i=0;i<items.size();i++){
			Map map = (Map)items.get(i);
			
			returnlist.add(map);
		}
		
		JSONObject jobj = new JSONObject();
		
		jobj.accumulate("draw", draw);
		jobj.accumulate("recordsFiltered", countnumber);
		jobj.accumulate("recordsTotal", countnumber);
		jobj.accumulate("data", returnlist);
		return jobj.toString();
	}
	//Excel生成--总部
	@RequestMapping(value = "/adminsharedpartzbExcel",produces = "application/json; charset=utf-8")
	@ResponseBody
	private String adminsharedpartzbExcel(HttpServletRequest request,HttpServletResponse resp) throws IOException {
		HttpSession session = request.getSession();
		resp.setHeader("Access-Control-Allow-Origin", "*");
		resp.setHeader("Access-Control-Allow-Methods", "GET,POST");
		JSONObject json = new JSONObject();
		try{
			String fg="总部";
			//生成xls表头
			List<String> header = new ArrayList<String>(); // 第一行数据
			List<List<String>> body = new ArrayList<List<String>>();
			header.add("军区编号");
			header.add("部队编号");
			header.add("装备代码");
			header.add("装备重要度");
		    header.add("器材代码");
		    header.add("器材名称");
		    header.add("单位");
		    header.add("单价");
		    header.add("单装用数");
		    header.add("分工");
		    header.add("预测所需数");
		    header.add("最大消耗数");
		    header.add("计划优化数");
		    
		    List items = dt_sharedpartservice.adminfindsharedpartlist(fg);
			for(int i=0;i<items.size();i++){
				Map map = (Map)items.get(i);
				//添加xls信息
				List<String> data = new ArrayList<String>();
				data.add(String.valueOf(map.get("jqcode")));
				data.add(String.valueOf(map.get("bdcode")));
				data.add(String.valueOf(map.get("zbcode")));
				data.add(String.valueOf(map.get("zbzyd")));
				data.add(String.valueOf(map.get("qccode")));
				data.add(String.valueOf(map.get("qcname")));
				data.add(String.valueOf(map.get("unit")));
				data.add(String.valueOf(map.get("unitprice")));
				data.add(String.valueOf(map.get("dzys")));
				data.add(String.valueOf(map.get("fg")));
				data.add(String.valueOf(map.get("predictionnumber")));
				data.add(String.valueOf(map.get("maxnumber")));
				data.add(String.valueOf(map.get("plannumber")));
		    	body.add(data);
		    	
			}
			//xls输出
			String loadpath = request.getSession().getServletContext().getRealPath("/") + "..//upload" + File.separator;
		    //新建文件路径
		    File file2 = new File(loadpath);
			if (!file2.exists()) {
				file2.mkdir();
			}
			try(OutputStream out = new FileOutputStream(loadpath+"/"+"共用件优化-总部级.xls")){
				createxls.generateExcel("Sheet1", header, body, out);
			} catch (Exception e) {
				e.printStackTrace();
			}
			json.put("code", "100");
			json.put("info", "生成成功");
		}catch(Exception e){
			e.printStackTrace();
			json.put("code", "400");
			json.put("info", "系统错误");
		}
		return json.toString();
	}
	//Excel生成--部队
	@RequestMapping(value = "/adminsharedpartbdExcel",produces = "application/json; charset=utf-8")
	@ResponseBody
	private String adminsharedpartbdExcel(HttpServletRequest request,HttpServletResponse resp) throws IOException {
		HttpSession session = request.getSession();
		resp.setHeader("Access-Control-Allow-Origin", "*");
		resp.setHeader("Access-Control-Allow-Methods", "GET,POST");
		JSONObject json = new JSONObject();
		try{
			String fg="部队";
			//生成xls表头
			List<String> header = new ArrayList<String>(); // 第一行数据
			List<List<String>> body = new ArrayList<List<String>>();
			header.add("军区编号");
			header.add("部队编号");
			header.add("装备代码");
			header.add("装备重要度");
		    header.add("器材代码");
		    header.add("器材名称");
		    header.add("单位");
		    header.add("单价");
		    header.add("单装用数");
		    header.add("分工");
		    header.add("预测所需数");
		    header.add("最大消耗数");
		    header.add("计划优化数");
		    
		    List items = dt_sharedpartservice.adminfindsharedpartlist(fg);
			for(int i=0;i<items.size();i++){
				Map map = (Map)items.get(i);
				//添加xls信息
				List<String> data = new ArrayList<String>();
				data.add(String.valueOf(map.get("jqcode")));
				data.add(String.valueOf(map.get("bdcode")));
				data.add(String.valueOf(map.get("zbcode")));
				data.add(String.valueOf(map.get("zbzyd")));
				data.add(String.valueOf(map.get("qccode")));
				data.add(String.valueOf(map.get("qcname")));
				data.add(String.valueOf(map.get("unit")));
				data.add(String.valueOf(map.get("unitprice")));
				data.add(String.valueOf(map.get("dzys")));
				data.add(String.valueOf(map.get("fg")));
				data.add(String.valueOf(map.get("predictionnumber")));
				data.add(String.valueOf(map.get("maxnumber")));
				data.add(String.valueOf(map.get("plannumber")));
		    	body.add(data);
		    	
			}
			//xls输出
			String loadpath = request.getSession().getServletContext().getRealPath("/") + "..//upload" + File.separator;
		    //新建文件路径
		    File file2 = new File(loadpath);
			if (!file2.exists()) {
				file2.mkdir();
			}
			try(OutputStream out = new FileOutputStream(loadpath+"/"+"共用件优化-部队级.xls")){
				createxls.generateExcel("Sheet1", header, body, out);
			} catch (Exception e) {
				e.printStackTrace();
			}
			json.put("code", "100");
			json.put("info", "生成成功");
		}catch(Exception e){
			e.printStackTrace();
			json.put("code", "400");
			json.put("info", "系统错误");
		}
		return json.toString();
	}
	//Excel生成--军区
	@RequestMapping(value = "/adminsharedpartjqExcel",produces = "application/json; charset=utf-8")
	@ResponseBody
	private String adminsharedpartjqExcel(HttpServletRequest request,HttpServletResponse resp) throws IOException {
		HttpSession session = request.getSession();
		resp.setHeader("Access-Control-Allow-Origin", "*");
		resp.setHeader("Access-Control-Allow-Methods", "GET,POST");
		JSONObject json = new JSONObject();
		try{
			String fg="军区";
			//生成xls表头
			List<String> header = new ArrayList<String>(); // 第一行数据
			List<List<String>> body = new ArrayList<List<String>>();
			header.add("军区编号");
			header.add("部队编号");
			header.add("装备代码");
			header.add("装备重要度");
		    header.add("器材代码");
		    header.add("器材名称");
		    header.add("单位");
		    header.add("单价");
		    header.add("单装用数");
		    header.add("分工");
		    header.add("预测所需数");
		    header.add("最大消耗数");
		    header.add("计划优化数");
		    
		    List items = dt_sharedpartservice.adminfindsharedpartlist(fg);
			for(int i=0;i<items.size();i++){
				Map map = (Map)items.get(i);
				//添加xls信息
				List<String> data = new ArrayList<String>();
				data.add(String.valueOf(map.get("jqcode")));
				data.add(String.valueOf(map.get("bdcode")));
				data.add(String.valueOf(map.get("zbcode")));
				data.add(String.valueOf(map.get("zbzyd")));
				data.add(String.valueOf(map.get("qccode")));
				data.add(String.valueOf(map.get("qcname")));
				data.add(String.valueOf(map.get("unit")));
				data.add(String.valueOf(map.get("unitprice")));
				data.add(String.valueOf(map.get("dzys")));
				data.add(String.valueOf(map.get("fg")));
				data.add(String.valueOf(map.get("predictionnumber")));
				data.add(String.valueOf(map.get("maxnumber")));
				data.add(String.valueOf(map.get("plannumber")));
		    	body.add(data);
		    	
			}
			//xls输出
			String loadpath = request.getSession().getServletContext().getRealPath("/") + "..//upload" + File.separator;
		    //新建文件路径
		    File file2 = new File(loadpath);
			if (!file2.exists()) {
				file2.mkdir();
			}
			try(OutputStream out = new FileOutputStream(loadpath+"/"+"共用件优化-军区级.xls")){
				createxls.generateExcel("Sheet1", header, body, out);
			} catch (Exception e) {
				e.printStackTrace();
			}
			json.put("code", "100");
			json.put("info", "生成成功");
		}catch(Exception e){
			e.printStackTrace();
			json.put("code", "400");
			json.put("info", "系统错误");
		}
		return json.toString();
	}
	//装备重要度修改
	@RequestMapping("/adminsharedpartedit")
	public String adminsharedpartedit(HttpServletRequest request, HttpServletResponse resp,Integer sharedpart_id) 
			throws IOException {
		dt_sharedpart sharedpart = dt_sharedpartservice.get(sharedpart_id);
		request.setAttribute("sharedpart", sharedpart);
		return "admin/sharedpartedit";
	}	
	@RequestMapping(value = "/adminsharedparteditajax",produces = "application/json; charset=utf-8")
	@ResponseBody
	private String adminsharedparteditajax(HttpServletRequest request,HttpServletResponse resp,Integer sharedpart_id,
			String zbzyd,Double kyd) throws IOException {
		HttpSession session = request.getSession();
		resp.setHeader("Access-Control-Allow-Origin", "*");
		resp.setHeader("Access-Control-Allow-Methods", "GET,POST");
		JSONObject json = new JSONObject();
		DecimalFormat df = new DecimalFormat("#");
		try{
			dt_sharedpart sharedpart = dt_sharedpartservice.get(sharedpart_id);
			sharedpart.setZbzyd(zbzyd);
			dt_sharedpartservice.saveOrUpdate(sharedpart);
			json.put("code", "100");
			json.put("info", "更新成功");
		}catch(Exception e){
			e.printStackTrace();
			json.put("code", "400");
			json.put("info", "系统错误");
		}
		return json.toString();
	}
	//装备可用度修改
	@RequestMapping("/adminkydedit")
	public String adminkydedit(HttpServletRequest request, HttpServletResponse resp,Integer sharedpart_id) 
			throws IOException {
		dt_sharedpart sharedpart2 = dt_sharedpartservice.get(1);
		request.setAttribute("kyd", sharedpart2.getKyd());
		return "admin/kydedit";
	}	
	@RequestMapping(value = "/adminkydeditajax",produces = "application/json; charset=utf-8")
	@ResponseBody
	private String adminkydeditajax(HttpServletRequest request,HttpServletResponse resp,Double kyd) throws IOException {
		HttpSession session = request.getSession();
		resp.setHeader("Access-Control-Allow-Origin", "*");
		resp.setHeader("Access-Control-Allow-Methods", "GET,POST");
		JSONObject json = new JSONObject();
		DecimalFormat df = new DecimalFormat("#");
		try{
			dt_sharedpart sharedpart2 = dt_sharedpartservice.get(1);
			sharedpart2.setKyd(kyd);
			dt_sharedpartservice.saveOrUpdate(sharedpart2);
			List list = dt_sharedpartservice.adminfindsharedpartlistall();
			for(int i=0;i<list.size();i++){
				Map map = (Map)list.get(i);
				dt_sharedpart sharedpart = dt_sharedpartservice.get(Integer.valueOf(String.valueOf(map.get("sharedpart_id"))));
				
				double predictionnumber = Double.valueOf(String.valueOf(map.get("ycz11")));
				double bzc = Double.valueOf(String.valueOf(map.get("bzc11")));
				double fx = Double.valueOf(String.valueOf(map.get("fx11")));
				
				sharedpart.setPredictionnumber(Integer.valueOf(df.format(predictionnumber)));
				sharedpart.setMaxnumber(Integer.valueOf(df.format(predictionnumber))+Integer.valueOf(df.format(bzc*3.9)));
				sharedpart.setPlannumber(Integer.valueOf(df.format(predictionnumber))+Integer.valueOf(df.format(bzc*3.9*(sharedpart2.getKyd()*2-1))));
				
				dt_sharedpartservice.saveOrUpdate(sharedpart);
				System.out.println("共用件优化："+i);
			}
			json.put("code", "100");
			json.put("info", "更新成功");
		}catch(Exception e){
			e.printStackTrace();
			json.put("code", "400");
			json.put("info", "系统错误");
		}
		return json.toString();
	}	
}






